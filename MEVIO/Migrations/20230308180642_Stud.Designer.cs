// <auto-generated />
using System;
using MEVIO.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MEVIO.Migrations
{
    [DbContext(typeof(MEVIOContext))]
    [Migration("20230308180642_Stud")]
    partial class Stud
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MEVIO.Models.Academy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequisitesId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequisitesId");

                    b.HasIndex("UserId");

                    b.ToTable("Academys");
                });

            modelBuilder.Entity("MEVIO.Models.ChatMessage", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EventChatId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MeasureChatId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskChatId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserChatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventChatId");

                    b.HasIndex("MeasureChatId");

                    b.HasIndex("TaskChatId");

                    b.HasIndex("UserChatId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("MEVIO.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasurePowerBiId")
                        .HasColumnType("int");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientStatusId");

                    b.HasIndex("MeasurePowerBiId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("MEVIO.Models.ClientHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAgreement")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientHistory");
                });

            modelBuilder.Entity("MEVIO.Models.ClientStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClientStatuses");
                });

            modelBuilder.Entity("MEVIO.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademyId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateStamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EducationFormId")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonOfBeginningId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EducationFormId");

                    b.HasIndex("SeasonOfBeginningId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("MEVIO.Models.DashBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("MEVIO.Models.EducationForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EducationFormName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("EducationForms");
                });

            modelBuilder.Entity("MEVIO.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClientHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("DashBoardId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventChatId")
                        .HasColumnType("int");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientHistoryId");

                    b.HasIndex("DashBoardId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("MEVIO.Models.EventChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EventChatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique()
                        .HasFilter("[EventId] IS NOT NULL");

                    b.ToTable("EventsChat");
                });

            modelBuilder.Entity("MEVIO.Models.EventsClients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EventId");

                    b.ToTable("EventsClients");
                });

            modelBuilder.Entity("MEVIO.Models.EventsUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventsUsers");
                });

            modelBuilder.Entity("MEVIO.Models.Measure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClientHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("DashBoardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("FreePlaces")
                        .HasColumnType("int");

                    b.Property<int?>("MeasureChatId")
                        .HasColumnType("int");

                    b.Property<string>("MeasureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MeasurePowerBiId")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceForMeasureId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientHistoryId");

                    b.HasIndex("DashBoardId");

                    b.HasIndex("PlaceForMeasureId");

                    b.HasIndex("UserId");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("MEVIO.Models.MeasureBusyTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlaceForMeasureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceForMeasureId");

                    b.ToTable("MeasuresBusyTable");
                });

            modelBuilder.Entity("MEVIO.Models.MeasureChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MeasureChatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MeasureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId")
                        .IsUnique()
                        .HasFilter("[MeasureId] IS NOT NULL");

                    b.ToTable("MeasureChats");
                });

            modelBuilder.Entity("MEVIO.Models.MeasurePhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MeasureId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId");

                    b.ToTable("MeasuresPhotos");
                });

            modelBuilder.Entity("MEVIO.Models.MeasurePowerBi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractsCount")
                        .HasColumnType("int");

                    b.Property<int?>("MeasureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId")
                        .IsUnique()
                        .HasFilter("[MeasureId] IS NOT NULL");

                    b.ToTable("MeasurePowerBis");
                });

            modelBuilder.Entity("MEVIO.Models.MeasureUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MeasureId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserMeasureAcceptStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserMeasureAcceptStatusId");

                    b.ToTable("MeasuresUsers");
                });

            modelBuilder.Entity("MEVIO.Models.MeasureVideos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MeasureId")
                        .HasColumnType("int");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId");

                    b.ToTable("MeasuresVideos");
                });

            modelBuilder.Entity("MEVIO.Models.MeasuresClients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("MeasureId");

                    b.ToTable("MeasuresClients");
                });

            modelBuilder.Entity("MEVIO.Models.PlaceForMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("PlaceForMeasureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlaceForMeasures");
                });

            modelBuilder.Entity("MEVIO.Models.Requisites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckingAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MFO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OKPO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalSumForEducation")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Requisites");
                });

            modelBuilder.Entity("MEVIO.Models.SeasonOfBeginning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SeasonOfBeginning");
                });

            modelBuilder.Entity("MEVIO.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("DateOfIssuePassport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DiscountSum")
                        .HasColumnType("float");

                    b.Property<string>("Discount_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDicount")
                        .HasColumnType("bit");

                    b.Property<string>("Login365")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MyStatLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MyStatPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonDocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique()
                        .HasFilter("[ContractId] IS NOT NULL");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("MEVIO.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClientHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("DashBoardId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("bit");

                    b.Property<int?>("TaskChatId")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientHistoryId");

                    b.HasIndex("DashBoardId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("MEVIO.Models.TaskChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TaskChatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId")
                        .IsUnique()
                        .HasFilter("[TaskId] IS NOT NULL");

                    b.ToTable("TaskChats");
                });

            modelBuilder.Entity("MEVIO.Models.TaskResponsiblePersons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("UnderTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UnderTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskResponsiblePersons");
                });

            modelBuilder.Entity("MEVIO.Models.TasksClients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TaskId");

                    b.ToTable("TasksClients");
                });

            modelBuilder.Entity("MEVIO.Models.TasksUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TasksUsers");
                });

            modelBuilder.Entity("MEVIO.Models.TasksWatchingPersons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("UnderTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UnderTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TasksWatchingPersons");
                });

            modelBuilder.Entity("MEVIO.Models.UnderTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("UnderTaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("UnderTasks");
                });

            modelBuilder.Entity("MEVIO.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfPassportIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventChatId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastTimeSignIn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MeasureChatId")
                        .HasColumnType("int");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskChatId")
                        .HasColumnType("int");

                    b.Property<string>("TelegramJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventChatId");

                    b.HasIndex("MeasureChatId");

                    b.HasIndex("TaskChatId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MEVIO.Models.UserAcceptStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAcceptStatuses");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserAcceptStatus");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MEVIO.Models.UserChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserChatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserChats");
                });

            modelBuilder.Entity("MEVIO.Models.UserChatUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("UserChatId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserChatId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChatUsers");
                });

            modelBuilder.Entity("MEVIO.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserRoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("MEVIO.Models.ResponsiblePerson", b =>
                {
                    b.HasBaseType("MEVIO.Models.User");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("UnderTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("TaskId");

                    b.HasIndex("UnderTaskId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("ResponsiblePerson");
                });

            modelBuilder.Entity("MEVIO.Models.WatchingPerson", b =>
                {
                    b.HasBaseType("MEVIO.Models.User");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<int?>("UnderTaskId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("TaskId");

                    b.HasIndex("UnderTaskId");

                    b.HasIndex("UserId");

                    b.ToTable(t =>
                        {
                            t.Property("Name")
                                .HasColumnName("WatchingPerson_Name");

                            t.Property("TaskId")
                                .HasColumnName("WatchingPerson_TaskId");

                            t.Property("UnderTaskId")
                                .HasColumnName("WatchingPerson_UnderTaskId");

                            t.Property("UserId")
                                .HasColumnName("WatchingPerson_UserId");
                        });

                    b.HasDiscriminator().HasValue("WatchingPerson");
                });

            modelBuilder.Entity("MEVIO.Models.UserEventAcceptStatus", b =>
                {
                    b.HasBaseType("MEVIO.Models.UserAcceptStatus");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.HasIndex("EventId");

                    b.HasDiscriminator().HasValue("UserEventAcceptStatus");
                });

            modelBuilder.Entity("MEVIO.Models.UserMeasureAcceptStatus", b =>
                {
                    b.HasBaseType("MEVIO.Models.UserAcceptStatus");

                    b.Property<int?>("MeasureId")
                        .HasColumnType("int");

                    b.HasIndex("MeasureId");

                    b.HasDiscriminator().HasValue("UserMeasureAcceptStatus");
                });

            modelBuilder.Entity("MEVIO.Models.UserTaskAcceptStatus", b =>
                {
                    b.HasBaseType("MEVIO.Models.UserAcceptStatus");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasIndex("TaskId");

                    b.HasDiscriminator().HasValue("UserTaskAcceptStatus");
                });

            modelBuilder.Entity("MEVIO.Models.Academy", b =>
                {
                    b.HasOne("MEVIO.Models.Requisites", "Requisites")
                        .WithMany()
                        .HasForeignKey("RequisitesId");

                    b.HasOne("MEVIO.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Requisites");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MEVIO.Models.ChatMessage", b =>
                {
                    b.HasOne("MEVIO.Models.EventChat", "EventChat")
                        .WithMany("ChatMessage")
                        .HasForeignKey("EventChatId");

                    b.HasOne("MEVIO.Models.MeasureChat", null)
                        .WithMany("ChatMessages")
                        .HasForeignKey("MeasureChatId");

                    b.HasOne("MEVIO.Models.TaskChat", "TaskChat")
                        .WithMany("ChatMessages")
                        .HasForeignKey("TaskChatId");

                    b.HasOne("MEVIO.Models.UserChat", "UserChat")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserChatId");

                    b.Navigation("EventChat");

                    b.Navigation("TaskChat");

                    b.Navigation("UserChat");
                });

            modelBuilder.Entity("MEVIO.Models.Client", b =>
                {
                    b.HasOne("MEVIO.Models.ClientStatus", "ClientStatus")
                        .WithMany()
                        .HasForeignKey("ClientStatusId");

                    b.HasOne("MEVIO.Models.MeasurePowerBi", "MeasurePowerBi")
                        .WithMany("Clients")
                        .HasForeignKey("MeasurePowerBiId");

                    b.Navigation("ClientStatus");

                    b.Navigation("MeasurePowerBi");
                });

            modelBuilder.Entity("MEVIO.Models.ClientHistory", b =>
                {
                    b.HasOne("MEVIO.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MEVIO.Models.Contract", b =>
                {
                    b.HasOne("MEVIO.Models.Academy", "Academy")
                        .WithMany()
                        .HasForeignKey("AcademyId");

                    b.HasOne("MEVIO.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("MEVIO.Models.EducationForm", "EducationForm")
                        .WithMany()
                        .HasForeignKey("EducationFormId");

                    b.HasOne("MEVIO.Models.SeasonOfBeginning", "SeasonOfBeginning")
                        .WithMany()
                        .HasForeignKey("SeasonOfBeginningId");

                    b.Navigation("Academy");

                    b.Navigation("Client");

                    b.Navigation("EducationForm");

                    b.Navigation("SeasonOfBeginning");
                });

            modelBuilder.Entity("MEVIO.Models.DashBoard", b =>
                {
                    b.HasOne("MEVIO.Models.User", "User")
                        .WithMany("DashBoards")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MEVIO.Models.Event", b =>
                {
                    b.HasOne("MEVIO.Models.ClientHistory", null)
                        .WithMany("Events")
                        .HasForeignKey("ClientHistoryId");

                    b.HasOne("MEVIO.Models.DashBoard", null)
                        .WithMany("Events")
                        .HasForeignKey("DashBoardId");

                    b.HasOne("MEVIO.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MEVIO.Models.EventChat", b =>
                {
                    b.HasOne("MEVIO.Models.Event", "Event")
                        .WithOne("EventChat")
                        .HasForeignKey("MEVIO.Models.EventChat", "EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MEVIO.Models.EventsClients", b =>
                {
                    b.HasOne("MEVIO.Models.Client", "Client")
                        .WithMany("EventsClients")
                        .HasForeignKey("ClientId");

                    b.HasOne("MEVIO.Models.Event", "Event")
                        .WithMany("EventsClients")
                        .HasForeignKey("EventId");

                    b.Navigation("Client");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MEVIO.Models.EventsUsers", b =>
                {
                    b.HasOne("MEVIO.Models.Event", "Event")
                        .WithMany("EventsUsers")
                        .HasForeignKey("EventId");

                    b.HasOne("MEVIO.Models.User", "User")
                        .WithMany("EventsUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MEVIO.Models.Measure", b =>
                {
                    b.HasOne("MEVIO.Models.ClientHistory", null)
                        .WithMany("Measures")
                        .HasForeignKey("ClientHistoryId");

                    b.HasOne("MEVIO.Models.DashBoard", null)
                        .WithMany("Measures")
                        .HasForeignKey("DashBoardId");

                    b.HasOne("MEVIO.Models.PlaceForMeasure", "PlaceForMeasure")
                        .WithMany("Measures")
                        .HasForeignKey("PlaceForMeasureId");

                    b.HasOne("MEVIO.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("PlaceForMeasure");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MEVIO.Models.MeasureBusyTable", b =>
                {
                    b.HasOne("MEVIO.Models.PlaceForMeasure", "PlaceForMeasure")
                        .WithMany("MeasureBusyTables")
                        .HasForeignKey("PlaceForMeasureId");

                    b.Navigation("PlaceForMeasure");
                });

            modelBuilder.Entity("MEVIO.Models.MeasureChat", b =>
                {
                    b.HasOne("MEVIO.Models.Measure", "Measure")
                        .WithOne("MeasureChat")
                        .HasForeignKey("MEVIO.Models.MeasureChat", "MeasureId");

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("MEVIO.Models.MeasurePhotos", b =>
                {
                    b.HasOne("MEVIO.Models.Measure", "Measure")
                        .WithMany("MeasurePhotos")
                        .HasForeignKey("MeasureId");

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("MEVIO.Models.MeasurePowerBi", b =>
                {
                    b.HasOne("MEVIO.Models.Measure", "Measure")
                        .WithOne("MeasurePowerBi")
                        .HasForeignKey("MEVIO.Models.MeasurePowerBi", "MeasureId");

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("MEVIO.Models.MeasureUsers", b =>
                {
                    b.HasOne("MEVIO.Models.Measure", "Measure")
                        .WithMany("MeasureUsers")
                        .HasForeignKey("MeasureId");

                    b.HasOne("MEVIO.Models.User", "User")
                        .WithMany("MeasureUsers")
                        .HasForeignKey("UserId");

                    b.HasOne("MEVIO.Models.UserMeasureAcceptStatus", "UserMeasureAcceptStatus")
                        .WithMany()
                        .HasForeignKey("UserMeasureAcceptStatusId");

                    b.Navigation("Measure");

                    b.Navigation("User");

                    b.Navigation("UserMeasureAcceptStatus");
                });

            modelBuilder.Entity("MEVIO.Models.MeasureVideos", b =>
                {
                    b.HasOne("MEVIO.Models.Measure", "Measure")
                        .WithMany("MeasureVideos")
                        .HasForeignKey("MeasureId");

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("MEVIO.Models.MeasuresClients", b =>
                {
                    b.HasOne("MEVIO.Models.Client", "Client")
                        .WithMany("MeasuresClients")
                        .HasForeignKey("ClientId");

                    b.HasOne("MEVIO.Models.Measure", "Measure")
                        .WithMany("MeasuresClients")
                        .HasForeignKey("MeasureId");

                    b.Navigation("Client");

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("MEVIO.Models.Student", b =>
                {
                    b.HasOne("MEVIO.Models.Contract", "Contract")
                        .WithOne("Student")
                        .HasForeignKey("MEVIO.Models.Student", "ContractId");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("MEVIO.Models.Task", b =>
                {
                    b.HasOne("MEVIO.Models.ClientHistory", null)
                        .WithMany("Tasks")
                        .HasForeignKey("ClientHistoryId");

                    b.HasOne("MEVIO.Models.DashBoard", null)
                        .WithMany("Tasks")
                        .HasForeignKey("DashBoardId");
                });

            modelBuilder.Entity("MEVIO.Models.TaskChat", b =>
                {
                    b.HasOne("MEVIO.Models.Task", "Task")
                        .WithOne("TaskChat")
                        .HasForeignKey("MEVIO.Models.TaskChat", "TaskId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MEVIO.Models.TaskResponsiblePersons", b =>
                {
                    b.HasOne("MEVIO.Models.Task", "Task")
                        .WithMany("TaskResponsiblePersons")
                        .HasForeignKey("TaskId");

                    b.HasOne("MEVIO.Models.UnderTask", "UnderTask")
                        .WithMany("TaskResponsiblePersons")
                        .HasForeignKey("UnderTaskId");

                    b.HasOne("MEVIO.Models.User", "User")
                        .WithMany("TaskResponsiblePersons")
                        .HasForeignKey("UserId");

                    b.Navigation("Task");

                    b.Navigation("UnderTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MEVIO.Models.TasksClients", b =>
                {
                    b.HasOne("MEVIO.Models.Client", "Client")
                        .WithMany("TaskClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MEVIO.Models.Task", "Task")
                        .WithMany("TaskClients")
                        .HasForeignKey("TaskId");

                    b.Navigation("Client");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MEVIO.Models.TasksUsers", b =>
                {
                    b.HasOne("MEVIO.Models.Task", "Task")
                        .WithMany("TasksUsers")
                        .HasForeignKey("TaskId");

                    b.HasOne("MEVIO.Models.User", "User")
                        .WithMany("TasksUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MEVIO.Models.TasksWatchingPersons", b =>
                {
                    b.HasOne("MEVIO.Models.Task", "Task")
                        .WithMany("TasksWatchingPersons")
                        .HasForeignKey("TaskId");

                    b.HasOne("MEVIO.Models.UnderTask", "UnderTask")
                        .WithMany("TasksWatchingPersons")
                        .HasForeignKey("UnderTaskId");

                    b.HasOne("MEVIO.Models.User", "User")
                        .WithMany("TasksWatchingPersons")
                        .HasForeignKey("UserId");

                    b.Navigation("Task");

                    b.Navigation("UnderTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MEVIO.Models.UnderTask", b =>
                {
                    b.HasOne("MEVIO.Models.Task", "Task")
                        .WithMany("UnderTasks")
                        .HasForeignKey("TaskId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MEVIO.Models.User", b =>
                {
                    b.HasOne("MEVIO.Models.EventChat", null)
                        .WithMany("Users")
                        .HasForeignKey("EventChatId");

                    b.HasOne("MEVIO.Models.MeasureChat", null)
                        .WithMany("Users")
                        .HasForeignKey("MeasureChatId");

                    b.HasOne("MEVIO.Models.TaskChat", "TaskChat")
                        .WithMany("Users")
                        .HasForeignKey("TaskChatId");

                    b.HasOne("MEVIO.Models.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("TaskChat");
                });

            modelBuilder.Entity("MEVIO.Models.UserAcceptStatus", b =>
                {
                    b.HasOne("MEVIO.Models.User", "User")
                        .WithMany("UserAcceptStatuses")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MEVIO.Models.UserChatUser", b =>
                {
                    b.HasOne("MEVIO.Models.UserChat", "UserChat")
                        .WithMany("UserChatUsers")
                        .HasForeignKey("UserChatId");

                    b.HasOne("MEVIO.Models.User", "User")
                        .WithMany("UserChatUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("User");

                    b.Navigation("UserChat");
                });

            modelBuilder.Entity("MEVIO.Models.ResponsiblePerson", b =>
                {
                    b.HasOne("MEVIO.Models.Task", null)
                        .WithMany("ResponsiblePersons")
                        .HasForeignKey("TaskId");

                    b.HasOne("MEVIO.Models.UnderTask", null)
                        .WithMany("ResponsiblePersons")
                        .HasForeignKey("UnderTaskId");

                    b.HasOne("MEVIO.Models.User", null)
                        .WithMany("ResponsiblePeople")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MEVIO.Models.WatchingPerson", b =>
                {
                    b.HasOne("MEVIO.Models.Task", null)
                        .WithMany("WatchingPersons")
                        .HasForeignKey("TaskId");

                    b.HasOne("MEVIO.Models.UnderTask", null)
                        .WithMany("WatchingPersons")
                        .HasForeignKey("UnderTaskId");

                    b.HasOne("MEVIO.Models.User", null)
                        .WithMany("WatchingPeople")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MEVIO.Models.UserEventAcceptStatus", b =>
                {
                    b.HasOne("MEVIO.Models.Event", "Event")
                        .WithMany("UserEventAcceptStatuses")
                        .HasForeignKey("EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MEVIO.Models.UserMeasureAcceptStatus", b =>
                {
                    b.HasOne("MEVIO.Models.Measure", "Measure")
                        .WithMany("UserMeasureAcceptStatuses")
                        .HasForeignKey("MeasureId");

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("MEVIO.Models.UserTaskAcceptStatus", b =>
                {
                    b.HasOne("MEVIO.Models.Task", "Task")
                        .WithMany("UserTaskAcceptStatuses")
                        .HasForeignKey("TaskId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MEVIO.Models.Client", b =>
                {
                    b.Navigation("EventsClients");

                    b.Navigation("MeasuresClients");

                    b.Navigation("TaskClients");
                });

            modelBuilder.Entity("MEVIO.Models.ClientHistory", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Measures");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("MEVIO.Models.Contract", b =>
                {
                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("MEVIO.Models.DashBoard", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Measures");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("MEVIO.Models.Event", b =>
                {
                    b.Navigation("EventChat")
                        .IsRequired();

                    b.Navigation("EventsClients");

                    b.Navigation("EventsUsers");

                    b.Navigation("UserEventAcceptStatuses");
                });

            modelBuilder.Entity("MEVIO.Models.EventChat", b =>
                {
                    b.Navigation("ChatMessage");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MEVIO.Models.Measure", b =>
                {
                    b.Navigation("MeasureChat")
                        .IsRequired();

                    b.Navigation("MeasurePhotos");

                    b.Navigation("MeasurePowerBi")
                        .IsRequired();

                    b.Navigation("MeasureUsers");

                    b.Navigation("MeasureVideos");

                    b.Navigation("MeasuresClients");

                    b.Navigation("UserMeasureAcceptStatuses");
                });

            modelBuilder.Entity("MEVIO.Models.MeasureChat", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MEVIO.Models.MeasurePowerBi", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("MEVIO.Models.PlaceForMeasure", b =>
                {
                    b.Navigation("MeasureBusyTables");

                    b.Navigation("Measures");
                });

            modelBuilder.Entity("MEVIO.Models.Task", b =>
                {
                    b.Navigation("ResponsiblePersons");

                    b.Navigation("TaskChat")
                        .IsRequired();

                    b.Navigation("TaskClients");

                    b.Navigation("TaskResponsiblePersons");

                    b.Navigation("TasksUsers");

                    b.Navigation("TasksWatchingPersons");

                    b.Navigation("UnderTasks");

                    b.Navigation("UserTaskAcceptStatuses");

                    b.Navigation("WatchingPersons");
                });

            modelBuilder.Entity("MEVIO.Models.TaskChat", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MEVIO.Models.UnderTask", b =>
                {
                    b.Navigation("ResponsiblePersons");

                    b.Navigation("TaskResponsiblePersons");

                    b.Navigation("TasksWatchingPersons");

                    b.Navigation("WatchingPersons");
                });

            modelBuilder.Entity("MEVIO.Models.User", b =>
                {
                    b.Navigation("DashBoards");

                    b.Navigation("EventsUsers");

                    b.Navigation("MeasureUsers");

                    b.Navigation("ResponsiblePeople");

                    b.Navigation("TaskResponsiblePersons");

                    b.Navigation("TasksUsers");

                    b.Navigation("TasksWatchingPersons");

                    b.Navigation("UserAcceptStatuses");

                    b.Navigation("UserChatUsers");

                    b.Navigation("WatchingPeople");
                });

            modelBuilder.Entity("MEVIO.Models.UserChat", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("UserChatUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
